{"version":3,"file":"/home/usuario/dsi/p9/src/pe101/map.ts","sources":["/home/usuario/dsi/p9/src/pe101/map.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAsB,EAAE;IACpB,gBAAe,CAAC;IAChB,sBAAsB;IACf,GAAG,CAAC,GAAa;QACpB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IACD;;;;OAIG;IACO,GAAG,CAAC,GAAa,EAAG,IAAS;QACnC,IAAI,GAAG,GAAa,EAAE,CAAC;QACvB,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,EAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAChD,OAAO,GAAG,CAAC;IACf,CAAC;CAWJ;AA3BD,gBA2BC","sourcesContent":["/**\n * Clase que implemeta un metodo template\n */\nexport abstract class TM {\n    constructor() {}\n    /**Metodo plantilla */\n    public run(arr: number[]):number[] {\n        return this.map(arr, this.reduce);\n        this.hook();\n    }\n    /**\n     * Metodo map general\n     * @param arr array\n     * @param Func funcion del metodo map\n     */\n    protected map(arr: number[],  Func: any): number[] {\n        let ret: number[] = [];\n        arr.forEach((item,i) => ret.push(Func(i, arr)));\n        return ret;\n    }\n    /**\n     * Metodo abastratco\n     * @param n valor\n     * @param arr array\n     */\n    protected abstract reduce(n: number, arr: number[]):number;\n    /**\n     * Metodo hook\n     */\n    protected abstract hook():void;\n}\n\n\n"]}